before_script:
  - printenv

stages:
  - test
  - build_firmware
  - build_frontend
  - deploy

# Core module unit tests
# Runs in mocked environment to simulate micropython on esp32
test_firmware:
  stage: test
  image: python:3.10-bullseye
  tags:
    - nas
    - docker
  script:
    - pip3 install pipenv
    - pipenv install
    - pipenv run coverage run --source='core,devices,sensors' tests/mock_environment/runtests.py
    - pipenv run coverage report
  coverage: '/TOTAL.*\s+(\d+\.\d+\%)$/'
  rules:
    - if: '$GITLAB_USER_NAME == "Firmware Release"'
      when: never
    - when: always

# Run django unit tests
test_frontend:
  stage: test
  image: python:3.10-bullseye
  tags:
    - nas
    - docker
  script:
    - pip3 install pipenv
    - pipenv install
    - cd frontend/
    - export CLI_SYNC=True
    - pipenv run coverage run --source='.' manage.py test
    - pipenv run coverage report
  coverage: '/TOTAL.*\s+(\d+\.\d+\%)$/'
  rules:
    - if: '$GITLAB_USER_NAME == "Firmware Release"'
      when: never
    - when: always

# Run CLI tool unit tests
test_cli:
  stage: test
  image: python:3.10-bullseye
  tags:
    - nas
    - docker
  script:
    - pip3 install pipenv
    - pipenv install
    - export PYTHONPATH=$PYTHONPATH:`pwd`/CLI
    - pipenv run coverage run -m unittest discover tests/cli
    - pipenv run coverage report
  coverage: '/TOTAL.*\s+(\d+\.\d+\%)$/'
  rules:
    - if: '$GITLAB_USER_NAME == "Firmware Release"'
      when: never
    - when: always

build_firmware:
  stage: build_firmware
  tags:
    - nas
    - shell
  before_script:
    - 'cd firmware/'
    - 'npm install -D'
  script:
    # Fresh build ensures files from previous commit not included in firmware
    - 'bash build.sh fresh'
    - 'mv firmware.bin firmware_$CI_COMMIT_TAG.bin'
    # Delete SSL certs (new certs for each build for improved security)
    - 'rm setup_ssl_certs.py'
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
  artifacts:
    paths:
      - firmware/firmware_$CI_COMMIT_TAG.bin
    expire_in: never
  release:
    tag_name: $CI_COMMIT_TAG
    ref: $CI_COMMIT_SHA
    name: 'Release $CI_COMMIT_TAG'
    description: 'Firmware version $CI_COMMIT_TAG'
    assets:
      links:
        - name: 'firmware_$CI_COMMIT_TAG.bin'
          url: '$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/file/firmware/firmware_$CI_COMMIT_TAG.bin'

# Build new container, increment most-recent tag
build_frontend:
  stage: build_frontend
  tags:
    - nas
    - shell
  before_script:
    - docker info
  script:
    - 'IMAGE_NAME="micropython-smarthome"'
    - 'LAST_TAG=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "^${IMAGE_NAME}:[0-9]*\.[0-9]*$" | sort --version-sort | tail -n 1 | cut -d\: -f 2)'
    - "NEW_TAG=$(echo $LAST_TAG | awk -F. '{$NF = $NF + 1;} 1' OFS=.)"
    - 'docker build --platform linux/amd64 -t $IMAGE_NAME:$NEW_TAG . -f frontend/docker/Dockerfile'
  rules:
    - if: '$CI_COMMIT_BRANCH != "master"'
      when: never
    - changes:
        - 'frontend/**/*'
        - 'util/**/*'
        - 'Pipfile'

# Deploy most-recent container
deploy:
  stage: deploy
  tags:
    - nas
    - shell
  before_script:
    - docker info
  script:
    - 'IMAGE_NAME="micropython-smarthome"'
    - 'LAST_TAG=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "^${IMAGE_NAME}:[0-9]*\.[0-9]*$" | sort --version-sort | tail -n 1 | cut -d\: -f 2)'
    - 'sed -i "s|$IMAGE_NAME:[0-9]*\.[0-9]*|$IMAGE_NAME:$LAST_TAG|g" /home/jamedeus/docker/docker-compose.yaml'
    - 'docker compose -f /home/jamedeus/docker/docker-compose.yaml up -d'
  rules:
    - if: '$CI_COMMIT_BRANCH != "master"'
      when: never
    - changes:
        - 'frontend/**/*'
        - 'util/**/*'
        - 'Pipfile'
