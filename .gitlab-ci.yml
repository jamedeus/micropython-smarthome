before_script:
  - docker info
  - printenv

stages:
  - test_firmware
  - test_frontend
  - test_cli
  - build
  - deploy

# Core module unit tests
# Runs in mocked environment to simulate micropython on esp32
test_firmware:
  stage: test_firmware
  tags:
    - arm64
  script:
    - pip3 install pipenv
    - export PATH=$PATH:/home/gitlab-runner/.local/bin
    - pipenv install
    - cd mock_test_environment/
    - for i in ../tests/test_*; do ln -s $i .; done
    - pipenv run coverage run --source='../core,../devices,../sensors' runtests.py
    - pipenv run coverage report -m --precision=1
  coverage: '/TOTAL.*\s+(\d+\.\d+\%)$/'
  rules:
    - if: '$GITLAB_USER_NAME == "Firmware Release"'
      when: never
    - when: always

# Run django unit tests
test_frontend:
  stage: test_frontend
  tags:
    - arm64
  script:
    - pip3 install pipenv
    - export PATH=$PATH:/home/gitlab-runner/.local/bin
    - pipenv install
    - cd frontend/
    - pipenv run coverage run --source='.' --omit='*manage.py,*wsgi.py,*asgi.py,*/tests.py,*unit_test_helpers.py,*/migrations/*.py' manage.py test
    - pipenv run coverage report -m --precision=1
  coverage: '/TOTAL.*\s+(\d+\.\d+\%)$/'
  rules:
    - if: '$GITLAB_USER_NAME == "Firmware Release"'
      when: never
    - when: always

# Run CLI tool unit tests
test_cli:
  stage: test_cli
  tags:
    - arm64
  script:
    - pip3 install pipenv
    - export PATH=$PATH:/home/gitlab-runner/.local/bin
    - pipenv install
    - cd CLI/
    - pipenv run coverage run --omit='tests/*' -m unittest discover tests/
    - pipenv run coverage report -m --precision=1
  coverage: '/TOTAL.*\s+(\d+\.\d+\%)$/'
  rules:
    - if: '$GITLAB_USER_NAME == "Firmware Release"'
      when: never
    - when: always

# Build new container, increment most-recent tag
build:
  stage: build
  tags:
    - arm64
  script:
    - 'export IMAGE_NAME="micropython-smarthome"'
    - 'export LAST_TAG=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "^${IMAGE_NAME}:[0-9]*\.[0-9]*$" | sort --version-sort | tail -n 1 | cut -d\: -f 2)'
    - "export NEW_TAG=$(echo $LAST_TAG | awk -F. '{$NF = $NF + 1;} 1' OFS=.)"
    - 'docker build --platform linux/arm64 -t $IMAGE_NAME:$NEW_TAG . -f frontend/docker/Dockerfile'
  rules:
    - if: '$GITLAB_USER_NAME == "Firmware Release"'
      when: never
    - changes:
        - 'frontend/**/*'
        - 'util/**/*'
        - 'Pipfile'

# Deploy most-recent container
deploy:
  stage: deploy
  tags:
    - arm64
  script:
    - 'export IMAGE_NAME="micropython-smarthome"'
    - 'export LAST_TAG=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "^${IMAGE_NAME}:[0-9]*\.[0-9]*$" | sort --version-sort | tail -n 1 | cut -d\: -f 2)'
    - 'sed -i "s|$IMAGE_NAME:[0-9]*\.[0-9]*|$IMAGE_NAME:$LAST_TAG|g" /home/pi/docker/docker-compose.yaml'
    - 'docker compose -f /home/pi/docker/docker-compose.yaml up -d'
  rules:
    - if: '$GITLAB_USER_NAME == "Firmware Release"'
      when: never
    - changes:
        - 'frontend/**/*'
        - 'util/**/*'
        - 'Pipfile'
