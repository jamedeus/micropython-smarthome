_provision()
{
    # Get current + previous args
    local cur prev
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"

    # Get directory containing provision.py and cli_config.json
    script_path=$(which "${COMP_WORDS[0]}")
    script_dir="$(dirname "$script_path")"

    # Get all node friendly names in space-seperated list
    node_opts=$(cat "$script_dir/cli_config.json" | jq '.nodes | keys | .[]' | sed 's/"//g' | sed -z 's/\n/ /g')

    # Read config directory from cli_config.json
    config_dir=`cat "$script_dir/cli_config.json" | jq .config_directory | sed 's/"//g'`

    # Group options into categories
    ip_opts="--ip"
    password_opts="--password"
    config_opts="--config"
    mgmt_opts="--all --test"

    # Takes options category as arg
    # Returns 1 if ANY used args are in category
    # Returns 0 if NO used args are in category
    option_used() {
        for i in $1; do
            for j in ${COMP_WORDS[*]}; do
                if [[ $i == $j ]]; then
                    return 1
                fi
            done
        done
        return 0
    }

    # Check if each category has been used
    option_used "$node_opts"
    node_used=$?

    option_used "$ip_opts"
    ip_used=$?

    option_used "$password_opts"
    password_used=$?

    option_used "$config_opts"
    config_used=$?

    option_used "$mgmt_opts"
    mgmt_used=$?

    # List for remaining available options
    all=""

    # If password options NOT used: add to options list
    if [[ $password_used == 0 ]]; then
        all+=$password_opts
        all+=" "
    fi

    # If friendly name, --all, or --test was used: no further options
    if [[ $node_used == 1 || $mgmt_used == 1 ]]; then
        :

    # If both IP and config are used: no further options
    elif [[ $ip_used == 1 && $config_used == 1 ]]; then
        :

    # Add remaining options
    else
        # If neither IP nor friendly name used: add both to options list
        if [[ $ip_used == 0 && $node_used == 0 ]]; then
            all+=$node_opts
            all+=" "
            all+=$ip_opts
            all+=" "
        fi

        # If config options NOT used: add to options list
        if [[ $config_used == 0 ]]; then
            all+=$config_opts
            all+=" "
        fi

        # If conflicting options NOT used: add management options to options list
        if [[ $ip_used == 0 && $config_used == 0 ]]; then
            all+=$mgmt_opts
            all+=" "
        fi
    fi

    # Add remaining available options to command completion list (may be overwritten in loops below)
    # stderr redirected to /dev/null due to error when completing words starting with -- on Ubuntu (default config bug)
    COMPREPLY=( $(compgen -W "${all}" ${cur} 2>/dev/null) )

    # Display nothing if prev is a password flag (user must enter password before next option)
    for i in $password_opts; do
        if [[ $i == $prev ]]; then
            COMPREPLY=( $(compgen -W "" ${cur}) )
        fi
    done

    # Display nothing if prev is an ip flag (user must enter IP before next option)
    for i in $ip_opts; do
        if [[ $i == $prev ]]; then
            COMPREPLY=( $(compgen -W "" ${cur}) )
        fi
    done

    # Display config files if prev is a config flag (user must select config file before next option)
    for i in $config_opts; do
        if [[ $i == $prev ]]; then
            config_files=$(ls -CF $config_dir)
            COMPREPLY=( $(compgen -W "${config_files}" ${cur}) )
        fi
    done

    return 0
}
complete -F _provision provision.py
